{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"figpptx What's figpptx? figpptx transfer figures of matplotlib to PowerPoint . Install Please see https://github.com/Sillte/figpptx Usage Please see Tutorial at first. Concepts By the following document, you can catch the gist of design. Concept and Overview of Structure","title":"Home"},{"location":"#figpptx","text":"","title":"figpptx"},{"location":"#whats-figpptx","text":"figpptx transfer figures of matplotlib to PowerPoint .","title":"What's figpptx?"},{"location":"#install","text":"Please see https://github.com/Sillte/figpptx","title":"Install"},{"location":"#usage","text":"Please see Tutorial at first.","title":"Usage"},{"location":"#concepts","text":"By the following document, you can catch the gist of design. Concept and Overview of Structure","title":"Concepts"},{"location":"concept/","text":"Concept Purpose Easy to transfer Figure of matplotlib to Object of Slide of Powerpoint. A Part of Artist are converted so that we can edit them via Powerpoint. Overview Overview of structure of this library is as follows.","title":"Concept and Overview"},{"location":"concept/#concept","text":"","title":"Concept"},{"location":"concept/#purpose","text":"Easy to transfer Figure of matplotlib to Object of Slide of Powerpoint. A Part of Artist are converted so that we can edit them via Powerpoint.","title":"Purpose"},{"location":"concept/#overview","text":"Overview of structure of this library is as follows.","title":"Overview"},{"location":"tutorial/","text":"Tutorial Introduction In tutorial pages, I'd like to introduce usage of figpptx and how to extend functionality of this library. I feel it is sufficient for most users to only know send and rasterize functions. To know basic usage, please read to the following page. Basic Usage I hope simple calls of these functions become helpful to you. Nevertheless, it may not satisfy your requirements. Especially, default settings of send function reflects tastes of the author strongly, so it may contradict against your desires. If you feel improvements or modification are required for each case, please modify them to your advantages. First of all, Overview of Design is helpful for customization. In addition, I'd like to leave some sample codes for extension. Separator Example Converter Example","title":"Introduction"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#introduction","text":"In tutorial pages, I'd like to introduce usage of figpptx and how to extend functionality of this library. I feel it is sufficient for most users to only know send and rasterize functions. To know basic usage, please read to the following page. Basic Usage I hope simple calls of these functions become helpful to you. Nevertheless, it may not satisfy your requirements. Especially, default settings of send function reflects tastes of the author strongly, so it may contradict against your desires. If you feel improvements or modification are required for each case, please modify them to your advantages. First of all, Overview of Design is helpful for customization. In addition, I'd like to leave some sample codes for extension. Separator Example Converter Example","title":"Introduction"},{"location":"tutorial/advance/","text":"Advance Usage Introduction I'd like to explain how to extend function of figpptx and make it adopt to the user's preference. Intrinsically, conversion from matplotlib to PowerPoint Object is almost impossible to pursue perfect. In addition, even if it is possible, I think the cost of them does not match the benefit. Instead, I believe that mechanism where users can modify the library to their tastes are more practical and useful. In Advance Usage, I'd like to provide some examples as simple tutorials. I'm happy you are interested in the library and extend it to make it your tool. Overview of figpptx . When you want to modify how an Artists is converted to PowerPoint Object , you change converter function . When you want to modify what Artist are converted as PowerPoint Object , you change Separator . That is the basic strategy of modification. I hope the following tutorials help you to get the gist of strategies for modification. Extension of transcribe Explains how to extend converter functions . [Tutorial for Separator] Not yet,.","title":"Advance Usage"},{"location":"tutorial/advance/#advance-usage","text":"","title":"Advance Usage"},{"location":"tutorial/advance/#introduction","text":"I'd like to explain how to extend function of figpptx and make it adopt to the user's preference. Intrinsically, conversion from matplotlib to PowerPoint Object is almost impossible to pursue perfect. In addition, even if it is possible, I think the cost of them does not match the benefit. Instead, I believe that mechanism where users can modify the library to their tastes are more practical and useful. In Advance Usage, I'd like to provide some examples as simple tutorials. I'm happy you are interested in the library and extend it to make it your tool.","title":"Introduction"},{"location":"tutorial/advance/#overview-of-figpptx","text":"When you want to modify how an Artists is converted to PowerPoint Object , you change converter function . When you want to modify what Artist are converted as PowerPoint Object , you change Separator . That is the basic strategy of modification. I hope the following tutorials help you to get the gist of strategies for modification. Extension of transcribe Explains how to extend converter functions . [Tutorial for Separator] Not yet,.","title":"Overview of figpptx."},{"location":"tutorial/basic/","text":"Getting Started Introduction I'd like to introduce basic usage of figpptx in this page. If you learn how to use rasterize and send function, then it is all right for 80% of use cases. In this short tutorial, these two functions are explained. rasterize function This section explains how to send Figure of matplotlib as an image. Step 1. Prepare a slide. Firstly, please prepare PowerPoint Slide as below. Step 2. Plot a Figure and rasterize. A rasterized figure is transferred to a slide with the below code. Please execute it. import matplotlib.pyplot as plt import figpptx fig , ax = plt . subplots () ax . plot ([ 0 , 1 ], [ 1 , 0 ], label = \"Line\" ) figpptx . rasterize ( fig ) The result. Tip With Alt + Tab key, the active window changes. This shortcut is useful to switch between PowerPoint and application for python codes such as Vim, VSCode, Pycharm, or Jupyter Notebook. send function rasterize function is sufficient if what you want is an image. However, sometimes, you would like to edit details of figure when making presentation. This section explains send function. For example, use send if you want to modify texts of label of your figure. Step 1. Prepare a slide. Firstly, please prepare PowerPoint Slide as the previous section. Step 2. Plot a Figure and send. Please execute the below code. import matplotlib.pyplot as plt import figpptx fig , ax = plt . subplots () ax . plot ([ 0 , 1 ], [ 0 , 1 ], label = \"Line\" ) ax . set_xlabel ( \"X-Label\" , fontsize = 14 ) ax . set_ylabel ( \"Y-Label\" , fontsize = 14 ) ax . set_title ( \"Title Text\" , fontsize = 18 ) figpptx . send ( fig ) The result. Since texts of titles and labels are PowerPoint Objects, you can edit them. Conclusion This tutorial describes. How to use rasterize function. Transfer a Figure as an image. How to use send function. Some texts are PowerPoint Objects. possible to modify them. If you need customizations of procedures, or have interests in internal mechanism, please read the advanced tutorials and code themselves.","title":"Basic Usage"},{"location":"tutorial/basic/#getting-started","text":"","title":"Getting Started"},{"location":"tutorial/basic/#introduction","text":"I'd like to introduce basic usage of figpptx in this page. If you learn how to use rasterize and send function, then it is all right for 80% of use cases. In this short tutorial, these two functions are explained.","title":"Introduction"},{"location":"tutorial/basic/#rasterize-function","text":"This section explains how to send Figure of matplotlib as an image.","title":"rasterize function"},{"location":"tutorial/basic/#step-1-prepare-a-slide","text":"Firstly, please prepare PowerPoint Slide as below.","title":"Step 1. Prepare a slide."},{"location":"tutorial/basic/#step-2-plot-a-figure-and-rasterize","text":"A rasterized figure is transferred to a slide with the below code. Please execute it. import matplotlib.pyplot as plt import figpptx fig , ax = plt . subplots () ax . plot ([ 0 , 1 ], [ 1 , 0 ], label = \"Line\" ) figpptx . rasterize ( fig ) The result. Tip With Alt + Tab key, the active window changes. This shortcut is useful to switch between PowerPoint and application for python codes such as Vim, VSCode, Pycharm, or Jupyter Notebook.","title":"Step 2. Plot a Figure and rasterize."},{"location":"tutorial/basic/#send-function","text":"rasterize function is sufficient if what you want is an image. However, sometimes, you would like to edit details of figure when making presentation. This section explains send function. For example, use send if you want to modify texts of label of your figure.","title":"send function"},{"location":"tutorial/basic/#step-1-prepare-a-slide_1","text":"Firstly, please prepare PowerPoint Slide as the previous section.","title":"Step 1. Prepare a slide."},{"location":"tutorial/basic/#step-2-plot-a-figure-and-send","text":"Please execute the below code. import matplotlib.pyplot as plt import figpptx fig , ax = plt . subplots () ax . plot ([ 0 , 1 ], [ 0 , 1 ], label = \"Line\" ) ax . set_xlabel ( \"X-Label\" , fontsize = 14 ) ax . set_ylabel ( \"Y-Label\" , fontsize = 14 ) ax . set_title ( \"Title Text\" , fontsize = 18 ) figpptx . send ( fig ) The result. Since texts of titles and labels are PowerPoint Objects, you can edit them.","title":"Step 2. Plot a Figure and send."},{"location":"tutorial/basic/#conclusion","text":"This tutorial describes. How to use rasterize function. Transfer a Figure as an image. How to use send function. Some texts are PowerPoint Objects. possible to modify them. If you need customizations of procedures, or have interests in internal mechanism, please read the advanced tutorials and code themselves.","title":"Conclusion"},{"location":"tutorial/converter/","text":"Extension of transcribe Introduction transcribe converts Artist to PowerPoint Object . ConverterManager enables you to customize how to perform this. This sections explains how to extend transcribe function. Explanation Shortly speaking, it is necessary to register a function to ConvertManager before you invoke transcribe . The interface is such as follows. @ConverterManager . register ( matplotlib . lines . Line2D ) def line2d_converter ( slide_editor , artist ): # `artist` is an instance of `matplotlib.lines.Line2D`. # you have to generate ``shapes``, corresponding to ``artist``. return [ shapes ] SlideEditor figpptx.slide_editor.SlideEditor have a role to create Shape Object of PowerPoint. Specifically, [generation of objects] slide attributes enables accessing to Slide.Shapes , which invokes AddShapes . [conversion of coordination] transform method converts coordination system between Figure and Slide Via get_box method, get Artist 's position in the coordination of Slide . Tutorial Here, consider the following code snippet. import figpptx import matplotlib.pyplot as plt import matplotlib from figpptx import ConverterManager , NonHandlingException # To reset the pre-determined function. @ConverterManager . register ( matplotlib . text . Text ) def func ( slide_editor , artist ): print ( artist ) raise NonHandlingException # Delegate to ``CrudeRenderer``. fig , ax = plt . subplots () ax . axis ( \"off\" ) style = \"circle\" fig . text ( 0.5 , 0.5 , style , ha = \"center\" , size = 14 , transform = fig . transFigure , bbox = dict ( boxstyle = style , fc = \"w\" , ec = \"red\" )) figpptx . transcribe ( fig ) The code above draws a text with a circle. It is a bit inconvenient that the AutoShapeType of red circle is not msoShapeOval . Here, we see how to revise this behavior. Implementation To implement this feature, we have to know the properties of matplotlib.text.Text and Shape 's property. Firstly, look up matplotlib.text.Text and related documents and codes. https://matplotlib.org/3.1.1/_modules/matplotlib/text.html#Text https://matplotlib.org/3.1.1/api/text_api.html?highlight=text#matplotlib.text.Text https://matplotlib.org/3.1.3/api/_as_gen/matplotlib.patches.FancyBboxPatch.html https://matplotlib.org/3.1.3/_modules/matplotlib/patches.html#BoxStyle Next, check VBA Reference. https://docs.microsoft.com/en-us/office/vba/api/powerpoint.shapes.addshape . https://docs.microsoft.com/en-us/office/vba/api/office.msoautoshapetype . From these surveys, we can see to get FancyBboxPatch 's information via, get_bbox_patch . What we do is as follows. Acquire the properties of Artist . Generate Shape . Set the properties of Artist to Shape . Though, the codes are a little bit long, it is possible to make a circle. import figpptx import matplotlib.pyplot as plt import matplotlib from matplotlib.patches import BoxStyle from figpptx import ConverterManager , NonHandlingException from figpptx import constants # Definition of constants. from figpptx import conversion_misc @ConverterManager . register ( matplotlib . text . Text ) def func ( slide_editor , artist ): patch = artist . get_bbox_patch () if patch is None : raise NonHandlingException # Delegate to ``CrudeRenderer``. boxstyle = patch . get_boxstyle () if isinstance ( boxstyle , BoxStyle . Circle ): box = slide_editor . get_box ( patch ) # ``box`` is a dict which constains ``Left``, ``Top``, ``Width`` and ``Height``. shape = slide_editor . slide . Shapes . AddShape ( Type = constants . msoShapeOval , ** box ) # Conversion of color format of ``Line``. edgecolor = patch . get_edgecolor () linewidth = patch . get_linewidth () color , transparency = conversion_misc . to_color_infos ( edgecolor ) shape . Line . ForeColor . RGB = color shape . Line . Transparency = transparency shape . Line . ForeColor . Weight = linewidth # Conversion of color format of ``Fill``. fillcolor = patch . get_facecolor () color , transparency = conversion_misc . to_color_infos ( fillcolor ) shape . Fill . ForeColor . RGB = color shape . Fill . Transparency = transparency # Setting Text Properties. shape . TextFrame . TextRange . Text = artist . get_text () shape . TextFrame . TextRange . Font . Size = artist . get_fontsize () color , _ = conversion_misc . to_color_infos ( artist . get_color ()) shape . TextFrame . TextRange . Font . Color . RGB = color shape . TextFrame . WordWrap = constants . msoFalse return shape else : raise NonHandlingException # Delegate to ``CrudeRenderer``. fig , ax = plt . subplots ( dpi = 72 ) ax . axis ( \"off\" ) style = \"circle\" fig . text ( 0.1 , 0.5 , \"circle\" , horizontalalignment = \"left\" , size = 14 , transform = fig . transFigure , bbox = dict ( boxstyle = style , fc = \"w\" , ec = \"red\" ), ) figpptx . transcribe ( fig ) Notice that the code above is insufficient. For other properties, or other inputs, the format became broke. In addition, the setting of type of fonts is omitted. Remind that mechanism of transcribe is uncertain and far from perfect. When you want steady behavior, you should use mechanism of rasterize , or you should write converters for your situations. Comment Specification of the registered Artist Class. When Figure or Axes are given as Parameter, then the target Artist must be the children of them. This means only if the registered Artist class is an instance of Figure.get_children() or Axes.get_children() , then registered function is invoked. For example, even if you register a function for FancyBboxPatch , it is not invoked in the tutorial case. This is because FancyBboxPatch is not included in Figure.get_children or Axes.get_children() .","title":"Converter Example"},{"location":"tutorial/converter/#extension-of-transcribe","text":"","title":"Extension of transcribe"},{"location":"tutorial/converter/#introduction","text":"transcribe converts Artist to PowerPoint Object . ConverterManager enables you to customize how to perform this. This sections explains how to extend transcribe function.","title":"Introduction"},{"location":"tutorial/converter/#explanation","text":"Shortly speaking, it is necessary to register a function to ConvertManager before you invoke transcribe . The interface is such as follows. @ConverterManager . register ( matplotlib . lines . Line2D ) def line2d_converter ( slide_editor , artist ): # `artist` is an instance of `matplotlib.lines.Line2D`. # you have to generate ``shapes``, corresponding to ``artist``. return [ shapes ]","title":"Explanation"},{"location":"tutorial/converter/#slideeditor","text":"figpptx.slide_editor.SlideEditor have a role to create Shape Object of PowerPoint. Specifically, [generation of objects] slide attributes enables accessing to Slide.Shapes , which invokes AddShapes . [conversion of coordination] transform method converts coordination system between Figure and Slide Via get_box method, get Artist 's position in the coordination of Slide .","title":"SlideEditor"},{"location":"tutorial/converter/#tutorial","text":"Here, consider the following code snippet. import figpptx import matplotlib.pyplot as plt import matplotlib from figpptx import ConverterManager , NonHandlingException # To reset the pre-determined function. @ConverterManager . register ( matplotlib . text . Text ) def func ( slide_editor , artist ): print ( artist ) raise NonHandlingException # Delegate to ``CrudeRenderer``. fig , ax = plt . subplots () ax . axis ( \"off\" ) style = \"circle\" fig . text ( 0.5 , 0.5 , style , ha = \"center\" , size = 14 , transform = fig . transFigure , bbox = dict ( boxstyle = style , fc = \"w\" , ec = \"red\" )) figpptx . transcribe ( fig ) The code above draws a text with a circle. It is a bit inconvenient that the AutoShapeType of red circle is not msoShapeOval . Here, we see how to revise this behavior.","title":"Tutorial"},{"location":"tutorial/converter/#implementation","text":"To implement this feature, we have to know the properties of matplotlib.text.Text and Shape 's property. Firstly, look up matplotlib.text.Text and related documents and codes. https://matplotlib.org/3.1.1/_modules/matplotlib/text.html#Text https://matplotlib.org/3.1.1/api/text_api.html?highlight=text#matplotlib.text.Text https://matplotlib.org/3.1.3/api/_as_gen/matplotlib.patches.FancyBboxPatch.html https://matplotlib.org/3.1.3/_modules/matplotlib/patches.html#BoxStyle Next, check VBA Reference. https://docs.microsoft.com/en-us/office/vba/api/powerpoint.shapes.addshape . https://docs.microsoft.com/en-us/office/vba/api/office.msoautoshapetype . From these surveys, we can see to get FancyBboxPatch 's information via, get_bbox_patch . What we do is as follows. Acquire the properties of Artist . Generate Shape . Set the properties of Artist to Shape . Though, the codes are a little bit long, it is possible to make a circle. import figpptx import matplotlib.pyplot as plt import matplotlib from matplotlib.patches import BoxStyle from figpptx import ConverterManager , NonHandlingException from figpptx import constants # Definition of constants. from figpptx import conversion_misc @ConverterManager . register ( matplotlib . text . Text ) def func ( slide_editor , artist ): patch = artist . get_bbox_patch () if patch is None : raise NonHandlingException # Delegate to ``CrudeRenderer``. boxstyle = patch . get_boxstyle () if isinstance ( boxstyle , BoxStyle . Circle ): box = slide_editor . get_box ( patch ) # ``box`` is a dict which constains ``Left``, ``Top``, ``Width`` and ``Height``. shape = slide_editor . slide . Shapes . AddShape ( Type = constants . msoShapeOval , ** box ) # Conversion of color format of ``Line``. edgecolor = patch . get_edgecolor () linewidth = patch . get_linewidth () color , transparency = conversion_misc . to_color_infos ( edgecolor ) shape . Line . ForeColor . RGB = color shape . Line . Transparency = transparency shape . Line . ForeColor . Weight = linewidth # Conversion of color format of ``Fill``. fillcolor = patch . get_facecolor () color , transparency = conversion_misc . to_color_infos ( fillcolor ) shape . Fill . ForeColor . RGB = color shape . Fill . Transparency = transparency # Setting Text Properties. shape . TextFrame . TextRange . Text = artist . get_text () shape . TextFrame . TextRange . Font . Size = artist . get_fontsize () color , _ = conversion_misc . to_color_infos ( artist . get_color ()) shape . TextFrame . TextRange . Font . Color . RGB = color shape . TextFrame . WordWrap = constants . msoFalse return shape else : raise NonHandlingException # Delegate to ``CrudeRenderer``. fig , ax = plt . subplots ( dpi = 72 ) ax . axis ( \"off\" ) style = \"circle\" fig . text ( 0.1 , 0.5 , \"circle\" , horizontalalignment = \"left\" , size = 14 , transform = fig . transFigure , bbox = dict ( boxstyle = style , fc = \"w\" , ec = \"red\" ), ) figpptx . transcribe ( fig ) Notice that the code above is insufficient. For other properties, or other inputs, the format became broke. In addition, the setting of type of fonts is omitted. Remind that mechanism of transcribe is uncertain and far from perfect. When you want steady behavior, you should use mechanism of rasterize , or you should write converters for your situations.","title":"Implementation"},{"location":"tutorial/converter/#comment","text":"","title":"Comment"},{"location":"tutorial/converter/#specification-of-the-registered-artist-class","text":"When Figure or Axes are given as Parameter, then the target Artist must be the children of them. This means only if the registered Artist class is an instance of Figure.get_children() or Axes.get_children() , then registered function is invoked. For example, even if you register a function for FancyBboxPatch , it is not invoked in the tutorial case. This is because FancyBboxPatch is not included in Figure.get_children or Axes.get_children() .","title":"Specification of the registered Artist Class."},{"location":"tutorial/separator/","text":"Setting of Separator. Introduction send function converts some Artists with transcribe while the others with rasterize . To specify classify Artists to these two categories, separator is used. By defining a separator , you can customize this classification. The example of separator is as follows. @SeparatorManager . register ( \"register_key\" ) def sample_separator ( artist ): # when you use the string ``register_key`` as ar parameter of ``separator``, you can use this function. # As a parameter, the target ``Artist`` is given, which is the same as the parameter of ``send``. # If the function returns 2-length tuple, # the first is used for ``transcribe``, the second is used for ``rasterize``. # If only 1 Sequence of ``Artists`` is returned, then it is regarded as ``shape_artists`` , # and ``image_artists`` is assumed to be the complement set. return shape_artists # or #return (shape_artists, image_artists) Tutorial Here, consider the following snippet. import numpy as np import matplotlib.pyplot as plt import figpptx fig , ax = plt . subplots () x = np . arange ( - 5 , + 5 , step = 0.01 ) y = 1 / 2 * x ** 2 ax . plot ( x , y ) annotation = ax . annotate ( \"Minimum\" , xy = ( 0 , 0 ), xycoords = 'data' , xytext = ( 0 , 5 ), arrowprops = dict ( arrowstyle = \"->\" )) figpptx . send ( fig , separator = \"rasterize\" ) This code converts a figure to an image. Here, we would like to pass annotation to transcibe . As you can imagine, it is all correct to implement a simple separator . import figpptx import numpy as np import matplotlib.pyplot as plt fig , ax = plt . subplots () x = np . arange ( - 5 , + 5 , step = 0.01 ) y = 1 / 2 * x ** 2 ax . plot ( x , y ) annotation = ax . annotate ( \"Minimum\" , xy = ( 0 , 0 ), xycoords = 'data' , xytext = ( 0 , 5 ), arrowprops = dict ( arrowstyle = \"->\" )) def separator ( artist ): return [ annotation ] figpptx . send ( fig , separator = separator ) If we want a more sophisticated one, then the following is one example. import numpy as np import matplotlib.pyplot as plt from matplotlib.text import Annotation import figpptx from figpptx.separator import SeparatorManager , get_leaf_artists fig , ax = plt . subplots () x = np . arange ( - 5 , + 5 , step = 0.01 ) y = 1 / 2 * x ** 2 ax . plot ( x , y ) annotation = ax . annotate ( \"Minimum\" , xy = ( 0 , 0 ), xycoords = 'data' , xytext = ( 0 , 5 ), arrowprops = dict ( arrowstyle = \"->\" )) @SeparatorManager . register ( \"my-separator\" ) def separator ( artist ): matchfunc = lambda artist : isinstance ( artist , Annotation ) return get_leaf_artists ( artist , matchfunc ) figpptx . send ( fig , separator = \"my-separator\" )","title":"Separator Example"},{"location":"tutorial/separator/#setting-of-separator","text":"","title":"Setting of Separator."},{"location":"tutorial/separator/#introduction","text":"send function converts some Artists with transcribe while the others with rasterize . To specify classify Artists to these two categories, separator is used. By defining a separator , you can customize this classification. The example of separator is as follows. @SeparatorManager . register ( \"register_key\" ) def sample_separator ( artist ): # when you use the string ``register_key`` as ar parameter of ``separator``, you can use this function. # As a parameter, the target ``Artist`` is given, which is the same as the parameter of ``send``. # If the function returns 2-length tuple, # the first is used for ``transcribe``, the second is used for ``rasterize``. # If only 1 Sequence of ``Artists`` is returned, then it is regarded as ``shape_artists`` , # and ``image_artists`` is assumed to be the complement set. return shape_artists # or #return (shape_artists, image_artists)","title":"Introduction"},{"location":"tutorial/separator/#tutorial","text":"Here, consider the following snippet. import numpy as np import matplotlib.pyplot as plt import figpptx fig , ax = plt . subplots () x = np . arange ( - 5 , + 5 , step = 0.01 ) y = 1 / 2 * x ** 2 ax . plot ( x , y ) annotation = ax . annotate ( \"Minimum\" , xy = ( 0 , 0 ), xycoords = 'data' , xytext = ( 0 , 5 ), arrowprops = dict ( arrowstyle = \"->\" )) figpptx . send ( fig , separator = \"rasterize\" ) This code converts a figure to an image. Here, we would like to pass annotation to transcibe . As you can imagine, it is all correct to implement a simple separator . import figpptx import numpy as np import matplotlib.pyplot as plt fig , ax = plt . subplots () x = np . arange ( - 5 , + 5 , step = 0.01 ) y = 1 / 2 * x ** 2 ax . plot ( x , y ) annotation = ax . annotate ( \"Minimum\" , xy = ( 0 , 0 ), xycoords = 'data' , xytext = ( 0 , 5 ), arrowprops = dict ( arrowstyle = \"->\" )) def separator ( artist ): return [ annotation ] figpptx . send ( fig , separator = separator ) If we want a more sophisticated one, then the following is one example. import numpy as np import matplotlib.pyplot as plt from matplotlib.text import Annotation import figpptx from figpptx.separator import SeparatorManager , get_leaf_artists fig , ax = plt . subplots () x = np . arange ( - 5 , + 5 , step = 0.01 ) y = 1 / 2 * x ** 2 ax . plot ( x , y ) annotation = ax . annotate ( \"Minimum\" , xy = ( 0 , 0 ), xycoords = 'data' , xytext = ( 0 , 5 ), arrowprops = dict ( arrowstyle = \"->\" )) @SeparatorManager . register ( \"my-separator\" ) def separator ( artist ): matchfunc = lambda artist : isinstance ( artist , Annotation ) return get_leaf_artists ( artist , matchfunc ) figpptx . send ( fig , separator = \"my-separator\" )","title":"Tutorial"},{"location":"tutorial/structure/","text":"","title":"Structure"}]}